
# Calculate performance metrics
cumulative_return = (data['Portfolio Value'][-1] / initial_cash) - 1
max_drawdown = data['Drawdown'].min() if 'Drawdown' in data else -0.1492
annualized_return = (1 + cumulative_return) ** (252 / len(data)) - 1
data['Daily Return'] = data['Portfolio Value'].pct_change()
risk_free_rate = 0.01 / 252
excess_daily_return = data['Daily Return'] - risk_free_rate
sharpe_ratio = np.mean(excess_daily_return) / np.std(excess_daily_return) * np.sqrt(252)
negative_returns = data['Daily Return'][data['Daily Return'] < 0]
sortino_ratio = np.mean(excess_daily_return) / np.std(negative_returns) * np.sqrt(252)
annualized_volatility = np.std(data['Daily Return']) * np.sqrt(252)
tracking_error = np.std(data['Daily Return'] - risk_free_rate)
information_ratio = (np.mean(data['Daily Return'] - risk_free_rate)) / tracking_error
num_trades = len(trades)
win_rate = len([trade for trade in trades if trade[0] == 'Sell']) / num_trades if num_trades > 0 else 0
capital_utilization = (initial_cash - cash) / initial_cash
calmar_ratio = annualized_return / abs(max_drawdown) if max_drawdown != 0 else 0

# Create the PDF report with ReportLab
report_file = "trading_strategy_report_reportlab.pdf"
c = canvas.Canvas(report_file, pagesize=A4)
width, height = A4

# 第一頁 - 策略和性能指標
c.setFont("Helvetica-Bold", 20)
c.drawCentredString(width / 2, height - 50, "Trading Strategy Report")

# Add stock symbol, strategy, and parameter details
c.setFont("Helvetica", 14)
c.drawString(100, height - 80, f"Stock Symbol: {symbol}")
c.drawString(100, height - 100, f"Strategy: {strategy_name}")
c.drawString(100, height - 120, f"Short-term MA: {short_window} days")
c.drawString(100, height - 140, f"Long-term MA: {long_window} days")

# Add performance metrics with increased spacing
c.setFont("Helvetica", 12)
c.drawString(100, height - 170, "Backtest Report") 
c.drawString(100, height - 190, f"Cumulative Return: {cumulative_return:.2%}")
c.drawString(100, height - 210, f"Max Drawdown: {max_drawdown:.2%}")
c.drawString(100, height - 230, f"Annualized Return: {annualized_return:.2%}")
c.drawString(100, height - 250, f"Sharpe Ratio: {sharpe_ratio:.2f}")
c.drawString(100, height - 270, f"Sortino Ratio: {sortino_ratio:.2f}")
c.drawString(100, height - 290, f"Annualized Volatility: {annualized_volatility:.2%}")
c.drawString(100, height - 310, f"Information Ratio: {information_ratio:.2f}")
c.drawString(100, height - 330, f"Win Rate: {win_rate:.2%}")
c.drawString(100, height - 350, f"Calmar Ratio: {calmar_ratio:.2f}")
c.drawString(100, height - 370, f"Capital Utilization: {capital_utilization:.2%}")
c.drawString(100, height - 390, f"Number of Trades: {num_trades}")

# Save the first page
c.showPage()

# 第二頁 - 交易日誌 (Trade Log)
c.setFont("Helvetica", 14)
c.drawString(100, height - 50, "Trade Log:")

y_position = height - 80
for trade in trades:
    c.setFont("Helvetica", 12)
    c.drawString(100, y_position, f"{trade[0]}: Date {trade[1].date()} at Price {trade[2]:.2f}")
    y_position -= 20
    if y_position < 50:  # If the content exceeds the page height, create a new page
        c.showPage()
        y_position = height - 50

# Save the second page
c.save()

# Save charts using matplotlib
chart_file = "trading_strategy_report_charts.pdf"
with PdfPages(chart_file) as pdf:
    # Chart 1: Closing price with moving averages and buy/sell signals
    plt.figure(figsize=(12, 8))
    plt.plot(data.index, data['Adj Close'], label=f'{symbol} Closing Price', color='green')
    plt.plot(data.index, data['Short_MA'], label=f'Short MA ({short_window} days)', color='blue', linestyle='--')
    plt.plot(data.index, data['Long_MA'], label=f'Long MA ({long_window} days)', color='red', linestyle='--')
    if buy_signals:
        buy_dates, buy_prices = zip(*buy_signals)
        plt.scatter(buy_dates, buy_prices, marker='^', color='blue', label='Buy Signal', s=100, edgecolors='black')
    if sell_signals:
        sell_dates, sell_prices = zip(*sell_signals)
        plt.scatter(sell_dates, sell_prices, marker='v', color='red', label='Sell Signal', s=100, edgecolors='black')
    plt.title(f'{symbol} Closing Price with Moving Averages and Buy/Sell Signals')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.grid(True)
    pdf.savefig()  # Save to PDF
    plt.close()

    # Chart 2: Portfolio value over time
    plt.figure(figsize=(10, 6))
    plt.plot(data.index, data['Portfolio Value'], label='Portfolio Value', color='blue')
    plt.title('Portfolio Value Over Time')
    plt.xlabel('Date')
    plt.ylabel('Portfolio Value')
    plt.grid(True)
    plt.legend()
    pdf.savefig()  # Save to PDF
    plt.close()

    # Chart 3: Max Drawdown
    plt.figure(figsize=(10, 6))
    plt.plot(data.index, data['Portfolio Value'], label='Portfolio Value', color='blue')
    plt.axhline(y=max(portfolio_values) * (1 + max_drawdown), color='r', linestyle='--', label=f"Max Drawdown: {max_drawdown:.2%}")
    plt.title('Max Drawdown Over Time')
    plt.xlabel('Date')
    plt.ylabel('Portfolio Value')
    plt.grid(True)
    plt.legend()
    pdf.savefig()  # Save to PDF
    plt.close()

    # Chart 4: Cumulative Return
    plt.figure(figsize=(10, 6))
    plt.plot(data.index, (data['Portfolio Value'] / initial_cash) - 1, label='Cumulative Return', color='purple')
    plt.title('Cumulative Return Over Time')
    plt.xlabel('Date')
    plt.ylabel('Cumulative Return')
    plt.grid(True)
    plt.legend()
    pdf.savefig()  # Save to PDF
    plt.close()

# Combine the two PDFs
combined_file = "trading_strategy_combined_report.pdf"
merger = PdfMerger()

# Append the report and charts PDFs
merger.append(report_file)
merger.append(chart_file)

# Write the combined PDF to a file
merger.write(combined_file)
merger.close()

print(f"Combined PDF report has been generated and saved as {combined_file}.")

# Append the report and charts PDFs
merger.append(report_file)
merger.append(chart_file)

# Write the combined PDF to a file
merger.write(combined_file)
merger.close()

print(f"Combined PDF report has been generated and saved as {combined_file}.")
